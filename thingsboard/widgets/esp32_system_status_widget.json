{
  "widgetTypes": [
    {
      "createdTime": 1640995200000,
      "tenantId": {
        "entityType": "TENANT",
        "id": "13814000-1dd2-11b2-8080-808080808080"
      },
      "name": "ESP32-S3 System Status",
      "descriptor": {
    "type": "latest",
    "sizeX": 8,
    "sizeY": 6,
    "resources": [],
    "templateHtml": "<div class=\"esp32-status-card\">\n  <!-- Header -->\n  <div class=\"status-header\">\n    <div class=\"device-info\">\n      <h3 class=\"device-title\">ESP32-S3 System Status</h3>\n      <div class=\"status-indicator\" data-bind=\"statusLed\"></div>\n    </div>\n    <div class=\"timestamp\" data-bind=\"lastUpdated\"></div>\n  </div>\n\n  <!-- Main Content Grid -->\n  <div class=\"status-grid\">\n    <!-- Temperature - Primary Metric -->\n    <div class=\"metric-card primary-metric\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">üå°Ô∏è</span>\n        <span class=\"metric-title\">Temperature</span>\n      </div>\n      <div class=\"temperature-gauge\">\n        <div class=\"gauge-container\">\n          <svg class=\"gauge-svg\" viewBox=\"0 0 200 120\">\n            <!-- Background Arc -->\n            <path class=\"gauge-background\" d=\"M 30 90 A 70 70 0 0 1 170 90\" stroke=\"#e0e0e0\" stroke-width=\"8\" fill=\"none\"/>\n            <!-- Active Arc -->\n            <path class=\"gauge-active\" d=\"M 30 90 A 70 70 0 0 1 170 90\" stroke=\"#4CAF50\" stroke-width=\"8\" fill=\"none\" data-bind=\"temperatureArc\"/>\n            <!-- Gauge Needle -->\n            <line class=\"gauge-needle\" x1=\"100\" y1=\"90\" x2=\"100\" y2=\"30\" stroke=\"#333\" stroke-width=\"2\" data-bind=\"temperatureNeedle\"/>\n            <circle cx=\"100\" cy=\"90\" r=\"5\" fill=\"#333\"/>\n          </svg>\n        </div>\n        <div class=\"temperature-value\">\n          <span class=\"value\" data-bind=\"temperature\">--</span>\n          <span class=\"unit\">¬∞C</span>\n        </div>\n        <div class=\"temperature-status\" data-bind=\"temperatureStatus\">Normal</div>\n      </div>\n    </div>\n\n    <!-- RSSI Signal Strength -->\n    <div class=\"metric-card\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">üì∂</span>\n        <span class=\"metric-title\">Wi-Fi Signal</span>\n      </div>\n      <div class=\"rssi-display\">\n        <div class=\"signal-bars\">\n          <div class=\"signal-bar\" data-bind=\"signalBar1\"></div>\n          <div class=\"signal-bar\" data-bind=\"signalBar2\"></div>\n          <div class=\"signal-bar\" data-bind=\"signalBar3\"></div>\n          <div class=\"signal-bar\" data-bind=\"signalBar4\"></div>\n          <div class=\"signal-bar\" data-bind=\"signalBar5\"></div>\n        </div>\n        <div class=\"rssi-value\">\n          <span class=\"value\" data-bind=\"rssi\">--</span>\n          <span class=\"unit\">dBm</span>\n        </div>\n        <div class=\"rssi-quality\" data-bind=\"signalQuality\">Unknown</div>\n      </div>\n    </div>\n\n    <!-- Memory Usage -->\n    <div class=\"metric-card\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">üíæ</span>\n        <span class=\"metric-title\">Free Memory</span>\n      </div>\n      <div class=\"memory-display\">\n        <div class=\"memory-progress\">\n          <div class=\"progress-track\">\n            <div class=\"progress-fill\" data-bind=\"memoryProgress\"></div>\n          </div>\n        </div>\n        <div class=\"memory-value\">\n          <span class=\"value\" data-bind=\"memory\">--</span>\n          <span class=\"unit\">KB</span>\n        </div>\n        <div class=\"memory-status\" data-bind=\"memoryStatus\">Available</div>\n      </div>\n    </div>\n\n    <!-- System Uptime -->\n    <div class=\"metric-card\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">‚è±Ô∏è</span>\n        <span class=\"metric-title\">Uptime</span>\n      </div>\n      <div class=\"uptime-display\">\n        <div class=\"uptime-segments\">\n          <div class=\"time-segment\">\n            <span class=\"time-value\" data-bind=\"uptimeDays\">0</span>\n            <span class=\"time-label\">Days</span>\n          </div>\n          <div class=\"time-segment\">\n            <span class=\"time-value\" data-bind=\"uptimeHours\">0</span>\n            <span class=\"time-label\">Hours</span>\n          </div>\n          <div class=\"time-segment\">\n            <span class=\"time-value\" data-bind=\"uptimeMins\">0</span>\n            <span class=\"time-label\">Mins</span>\n          </div>\n        </div>\n        <div class=\"uptime-stability\" data-bind=\"uptimeStatus\">Starting</div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Footer -->\n  <div class=\"status-footer\">\n    <div class=\"connection-status\">\n      <span class=\"connection-dot\" data-bind=\"connectionDot\"></span>\n      <span class=\"connection-text\" data-bind=\"connectionText\">Connected</span>\n    </div>\n    <div class=\"data-rate\">Updates: 5s</div>\n  </div>\n</div>",
    "templateCss": ".esp32-status-card {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 16px;\n  padding: 20px;\n  color: white;\n  height: 100%;\n  box-sizing: border-box;\n  box-shadow: 0 8px 32px rgba(0,0,0,0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.esp32-status-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255,255,255,0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 16px;\n  z-index: 0;\n}\n\n.esp32-status-card > * {\n  position: relative;\n  z-index: 1;\n}\n\n/* Header Styles */\n.status-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid rgba(255,255,255,0.2);\n}\n\n.device-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.device-title {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.status-indicator {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: #4CAF50;\n  box-shadow: 0 0 10px rgba(76,175,80,0.6);\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n.timestamp {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n/* Grid Layout */\n.status-grid {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  gap: 15px;\n  height: calc(100% - 120px);\n}\n\n.metric-card {\n  background: rgba(255,255,255,0.15);\n  border-radius: 12px;\n  padding: 15px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255,255,255,0.2);\n  transition: all 0.3s ease;\n}\n\n.metric-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n}\n\n.primary-metric {\n  grid-row: 1 / 3;\n}\n\n.metric-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 10px;\n}\n\n.metric-icon {\n  font-size: 16px;\n}\n\n.metric-title {\n  font-size: 14px;\n  font-weight: 500;\n  opacity: 0.9;\n}\n\n/* Temperature Gauge Styles */\n.temperature-gauge {\n  text-align: center;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.gauge-container {\n  width: 120px;\n  height: 80px;\n  margin: 0 auto 15px;\n}\n\n.gauge-svg {\n  width: 100%;\n  height: 100%;\n}\n\n.gauge-active {\n  transition: stroke-dasharray 0.5s ease;\n}\n\n.gauge-needle {\n  transition: transform 0.5s ease;\n  transform-origin: 100px 90px;\n}\n\n.temperature-value {\n  margin-bottom: 8px;\n}\n\n.temperature-value .value {\n  font-size: 24px;\n  font-weight: 700;\n  text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.temperature-value .unit {\n  font-size: 16px;\n  opacity: 0.8;\n  margin-left: 4px;\n}\n\n.temperature-status {\n  font-size: 12px;\n  opacity: 0.8;\n  font-weight: 500;\n}\n\n/* RSSI Signal Styles */\n.rssi-display {\n  text-align: center;\n}\n\n.signal-bars {\n  display: flex;\n  justify-content: center;\n  gap: 3px;\n  margin-bottom: 10px;\n}\n\n.signal-bar {\n  width: 8px;\n  background: rgba(255,255,255,0.3);\n  border-radius: 4px 4px 0 0;\n  transition: all 0.3s ease;\n}\n\n.signal-bar:nth-child(1) { height: 8px; }\n.signal-bar:nth-child(2) { height: 12px; }\n.signal-bar:nth-child(3) { height: 16px; }\n.signal-bar:nth-child(4) { height: 20px; }\n.signal-bar:nth-child(5) { height: 24px; }\n\n.signal-bar.active {\n  background: #4CAF50;\n  box-shadow: 0 0 8px rgba(76,175,80,0.5);\n}\n\n.rssi-value .value {\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.rssi-value .unit {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.rssi-quality {\n  font-size: 11px;\n  opacity: 0.8;\n  margin-top: 4px;\n}\n\n/* Memory Progress Styles */\n.memory-display {\n  text-align: center;\n}\n\n.memory-progress {\n  margin-bottom: 12px;\n}\n\n.progress-track {\n  width: 100%;\n  height: 8px;\n  background: rgba(255,255,255,0.3);\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #4CAF50, #2196F3);\n  border-radius: 4px;\n  transition: width 0.5s ease;\n  box-shadow: 0 0 8px rgba(76,175,80,0.3);\n}\n\n.memory-value .value {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.memory-value .unit {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.memory-status {\n  font-size: 11px;\n  opacity: 0.8;\n  margin-top: 4px;\n}\n\n/* Uptime Styles */\n.uptime-display {\n  text-align: center;\n}\n\n.uptime-segments {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.time-segment {\n  flex: 1;\n  text-align: center;\n}\n\n.time-value {\n  display: block;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 1;\n}\n\n.time-label {\n  display: block;\n  font-size: 10px;\n  opacity: 0.8;\n  margin-top: 2px;\n}\n\n.uptime-stability {\n  font-size: 11px;\n  opacity: 0.8;\n}\n\n/* Footer Styles */\n.status-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 15px;\n  padding-top: 15px;\n  border-top: 1px solid rgba(255,255,255,0.2);\n  font-size: 12px;\n}\n\n.connection-status {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.connection-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #4CAF50;\n  box-shadow: 0 0 8px rgba(76,175,80,0.5);\n}\n\n.data-rate {\n  opacity: 0.8;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .status-grid {\n    grid-template-columns: 1fr;\n    grid-template-rows: auto;\n  }\n  \n  .primary-metric {\n    grid-row: auto;\n  }\n  \n  .device-title {\n    font-size: 16px;\n  }\n  \n  .gauge-container {\n    width: 100px;\n    height: 70px;\n  }\n  \n  .temperature-value .value {\n    font-size: 20px;\n  }\n}\n\n/* Color Classes for Dynamic Styling */\n.status-normal { color: #4CAF50; }\n.status-warning { color: #FF9800; }\n.status-critical { color: #F44336; }\n\n.temp-normal .gauge-active { stroke: #4CAF50; }\n.temp-warning .gauge-active { stroke: #FF9800; }\n.temp-critical .gauge-active { stroke: #F44336; }\n\n.signal-excellent .signal-bar.active { background: #4CAF50; }\n.signal-good .signal-bar.active { background: #8BC34A; }\n.signal-fair .signal-bar.active { background: #FF9800; }\n.signal-poor .signal-bar.active { background: #F44336; }",
    "controllerScript": "self.onInit = function() {\n    // Initialize data storage\n    self.ctx.data = {\n        temperature: 0,\n        rssi: 0,\n        heap: 0,\n        uptime: 0\n    };\n    \n    // Get DOM elements\n    self.ctx.elements = {\n        temperature: self.ctx.$container.find('[data-bind=\"temperature\"]'),\n        temperatureArc: self.ctx.$container.find('[data-bind=\"temperatureArc\"]'),\n        temperatureNeedle: self.ctx.$container.find('[data-bind=\"temperatureNeedle\"]'),\n        temperatureStatus: self.ctx.$container.find('[data-bind=\"temperatureStatus\"]'),\n        rssi: self.ctx.$container.find('[data-bind=\"rssi\"]'),\n        signalQuality: self.ctx.$container.find('[data-bind=\"signalQuality\"]'),\n        memory: self.ctx.$container.find('[data-bind=\"memory\"]'),\n        memoryProgress: self.ctx.$container.find('[data-bind=\"memoryProgress\"]'),\n        memoryStatus: self.ctx.$container.find('[data-bind=\"memoryStatus\"]'),\n        uptimeDays: self.ctx.$container.find('[data-bind=\"uptimeDays\"]'),\n        uptimeHours: self.ctx.$container.find('[data-bind=\"uptimeHours\"]'),\n        uptimeMins: self.ctx.$container.find('[data-bind=\"uptimeMins\"]'),\n        uptimeStatus: self.ctx.$container.find('[data-bind=\"uptimeStatus\"]'),\n        statusLed: self.ctx.$container.find('[data-bind=\"statusLed\"]'),\n        connectionDot: self.ctx.$container.find('[data-bind=\"connectionDot\"]'),\n        connectionText: self.ctx.$container.find('[data-bind=\"connectionText\"]'),\n        lastUpdated: self.ctx.$container.find('[data-bind=\"lastUpdated\"]')\n    };\n    \n    // Initialize display\n    self.updateDisplay();\n};\n\nself.onDataUpdated = function() {\n    // Extract data from ThingsBoard datasources\n    var data = self.ctx.defaultSubscription.data;\n    \n    if (data && data.length > 0) {\n        // Update internal data store\n        for (var i = 0; i < data.length; i++) {\n            var dataKey = data[i].dataKey;\n            if (dataKey && data[i].data.length > 0) {\n                var value = data[i].data[data[i].data.length - 1][1];\n                \n                switch(dataKey.name) {\n                    case 'temperature':\n                        self.ctx.data.temperature = parseFloat(value);\n                        break;\n                    case 'rssi':\n                        self.ctx.data.rssi = parseInt(value);\n                        break;\n                    case 'heap':\n                        self.ctx.data.heap = parseInt(value);\n                        break;\n                    case 'uptime':\n                        self.ctx.data.uptime = parseInt(value);\n                        break;\n                }\n            }\n        }\n        \n        // Update display\n        self.updateDisplay();\n        \n        // Update timestamp\n        var now = new Date();\n        self.ctx.elements.lastUpdated.text('Last: ' + now.toLocaleTimeString());\n    }\n};\n\nself.updateDisplay = function() {\n    // Update Temperature\n    self.updateTemperature();\n    \n    // Update RSSI\n    self.updateRSSI();\n    \n    // Update Memory\n    self.updateMemory();\n    \n    // Update Uptime\n    self.updateUptime();\n    \n    // Update Connection Status\n    self.updateConnectionStatus();\n};\n\nself.updateTemperature = function() {\n    var temp = self.ctx.data.temperature;\n    \n    // Update temperature value\n    self.ctx.elements.temperature.text(temp.toFixed(1));\n    \n    // Update gauge (0-60¬∞C range)\n    var percentage = Math.min(Math.max(temp / 60, 0), 1);\n    var angle = -90 + (percentage * 180); // -90 to +90 degrees\n    \n    // Update needle rotation\n    self.ctx.elements.temperatureNeedle.attr('transform', 'rotate(' + angle + ' 100 90)');\n    \n    // Update arc (stroke-dasharray for progress)\n    var circumference = Math.PI * 70; // radius = 70\n    var progress = percentage * circumference;\n    self.ctx.elements.temperatureArc.attr('stroke-dasharray', progress + ',' + circumference);\n    \n    // Update status and color\n    var statusClass, statusText, color;\n    if (temp < 30) {\n        statusClass = 'temp-normal';\n        statusText = 'Normal';\n        color = '#4CAF50';\n    } else if (temp < 45) {\n        statusClass = 'temp-warning';\n        statusText = 'Warm';\n        color = '#FF9800';\n    } else {\n        statusClass = 'temp-critical';\n        statusText = 'Hot';\n        color = '#F44336';\n    }\n    \n    self.ctx.elements.temperatureStatus.text(statusText).removeClass('status-normal status-warning status-critical').addClass('status-' + statusClass.split('-')[1]);\n    self.ctx.elements.temperatureArc.attr('stroke', color);\n    self.ctx.$container.find('.temperature-gauge').removeClass('temp-normal temp-warning temp-critical').addClass(statusClass);\n};\n\nself.updateRSSI = function() {\n    var rssi = self.ctx.data.rssi;\n    \n    // Update RSSI value\n    self.ctx.elements.rssi.text(rssi);\n    \n    // Calculate signal strength (convert dBm to bars)\n    var bars = 0;\n    var quality = 'Poor';\n    var qualityClass = 'signal-poor';\n    \n    if (rssi >= -30) {\n        bars = 5;\n        quality = 'Excellent';\n        qualityClass = 'signal-excellent';\n    } else if (rssi >= -50) {\n        bars = 4;\n        quality = 'Very Good';\n        qualityClass = 'signal-excellent';\n    } else if (rssi >= -60) {\n        bars = 3;\n        quality = 'Good';\n        qualityClass = 'signal-good';\n    } else if (rssi >= -70) {\n        bars = 2;\n        quality = 'Fair';\n        qualityClass = 'signal-fair';\n    } else if (rssi >= -80) {\n        bars = 1;\n        quality = 'Poor';\n        qualityClass = 'signal-poor';\n    }\n    \n    // Update signal bars\n    self.ctx.$container.find('.signal-bar').each(function(index) {\n        if (index < bars) {\n            $(this).addClass('active');\n        } else {\n            $(this).removeClass('active');\n        }\n    });\n    \n    // Update quality text and class\n    self.ctx.elements.signalQuality.text(quality);\n    self.ctx.$container.find('.rssi-display').removeClass('signal-excellent signal-good signal-fair signal-poor').addClass(qualityClass);\n};\n\nself.updateMemory = function() {\n    var heap = self.ctx.data.heap;\n    var heapKB = Math.round(heap / 1024);\n    \n    // Update memory value\n    self.ctx.elements.memory.text(heapKB.toLocaleString());\n    \n    // Calculate memory percentage (assuming 320KB total)\n    var totalMemoryKB = 320;\n    var percentage = Math.min((heapKB / totalMemoryKB) * 100, 100);\n    \n    // Update progress bar\n    self.ctx.elements.memoryProgress.css('width', percentage + '%');\n    \n    // Update status\n    var status, statusClass, color;\n    if (percentage > 70) {\n        status = 'Excellent';\n        statusClass = 'status-normal';\n        color = 'linear-gradient(90deg, #4CAF50, #2196F3)';\n    } else if (percentage > 40) {\n        status = 'Good';\n        statusClass = 'status-warning';\n        color = 'linear-gradient(90deg, #FF9800, #2196F3)';\n    } else {\n        status = 'Low';\n        statusClass = 'status-critical';\n        color = 'linear-gradient(90deg, #F44336, #2196F3)';\n    }\n    \n    self.ctx.elements.memoryStatus.text(status).removeClass('status-normal status-warning status-critical').addClass(statusClass);\n    self.ctx.elements.memoryProgress.css('background', color);\n};\n\nself.updateUptime = function() {\n    var uptime = self.ctx.data.uptime;\n    \n    // Convert seconds to days, hours, minutes\n    var days = Math.floor(uptime / 86400);\n    var hours = Math.floor((uptime % 86400) / 3600);\n    var minutes = Math.floor((uptime % 3600) / 60);\n    \n    // Update time segments\n    self.ctx.elements.uptimeDays.text(days);\n    self.ctx.elements.uptimeHours.text(hours);\n    self.ctx.elements.uptimeMins.text(minutes);\n    \n    // Update stability status\n    var status;\n    if (uptime < 300) {\n        status = 'Starting';\n    } else if (uptime < 3600) {\n        status = 'Warming Up';\n    } else if (uptime < 86400) {\n        status = 'Stable';\n    } else {\n        status = 'Rock Solid';\n    }\n    \n    self.ctx.elements.uptimeStatus.text(status);\n};\n\nself.updateConnectionStatus = function() {\n    // Check if data is recent (within last 30 seconds)\n    var now = Date.now();\n    var isConnected = true; // Assume connected if we're receiving data\n    \n    if (isConnected) {\n        self.ctx.elements.connectionDot.css('background', '#4CAF50');\n        self.ctx.elements.connectionText.text('Connected');\n        self.ctx.elements.statusLed.css('background', '#4CAF50');\n    } else {\n        self.ctx.elements.connectionDot.css('background', '#F44336');\n        self.ctx.elements.connectionText.text('Disconnected');\n        self.ctx.elements.statusLed.css('background', '#F44336');\n    }\n};\n\nself.onDestroy = function() {\n    // Cleanup if needed\n};",
    "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"ESP32-S3 System Status Settings\",\n        \"properties\": {\n            \"temperatureSettings\": {\n                \"type\": \"object\",\n                \"title\": \"Temperature Settings\",\n                \"properties\": {\n                    \"normalThreshold\": {\n                        \"type\": \"number\",\n                        \"title\": \"Normal Threshold (¬∞C)\",\n                        \"default\": 30\n                    },\n                    \"warningThreshold\": {\n                        \"type\": \"number\",\n                        \"title\": \"Warning Threshold (¬∞C)\",\n                        \"default\": 45\n                    },\n                    \"maxValue\": {\n                        \"type\": \"number\",\n                        \"title\": \"Maximum Gauge Value (¬∞C)\",\n                        \"default\": 60\n                    }\n                }\n            },\n            \"rssiSettings\": {\n                \"type\": \"object\",\n                \"title\": \"Wi-Fi Signal Settings\",\n                \"properties\": {\n                    \"excellentThreshold\": {\n                        \"type\": \"number\",\n                        \"title\": \"Excellent Signal (dBm)\",\n                        \"default\": -50\n                    },\n                    \"goodThreshold\": {\n                        \"type\": \"number\",\n                        \"title\": \"Good Signal (dBm)\",\n                        \"default\": -60\n                    },\n                    \"fairThreshold\": {\n                        \"type\": \"number\",\n                        \"title\": \"Fair Signal (dBm)\",\n                        \"default\": -70\n                    },\n                    \"poorThreshold\": {\n                        \"type\": \"number\",\n                        \"title\": \"Poor Signal (dBm)\",\n                        \"default\": -80\n                    }\n                }\n            },\n            \"memorySettings\": {\n                \"type\": \"object\",\n                \"title\": \"Memory Settings\",\n                \"properties\": {\n                    \"totalMemoryKB\": {\n                        \"type\": \"number\",\n                        \"title\": \"Total Memory (KB)\",\n                        \"default\": 320\n                    },\n                    \"warningPercentage\": {\n                        \"type\": \"number\",\n                        \"title\": \"Warning Percentage\",\n                        \"default\": 40\n                    },\n                    \"criticalPercentage\": {\n                        \"type\": \"number\",\n                        \"title\": \"Critical Percentage\",\n                        \"default\": 20\n                    }\n                }\n            },\n            \"displaySettings\": {\n                \"type\": \"object\",\n                \"title\": \"Display Settings\",\n                \"properties\": {\n                    \"showTimestamp\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"Show Last Updated\",\n                        \"default\": true\n                    },\n                    \"animationsEnabled\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"Enable Animations\",\n                        \"default\": true\n                    },\n                    \"theme\": {\n                        \"type\": \"string\",\n                        \"title\": \"Color Theme\",\n                        \"enum\": [\"blue-purple\", \"green-teal\", \"orange-red\", \"dark-mode\"],\n                        \"default\": \"blue-purple\"\n                    }\n                }\n            }\n        }\n    },\n    \"form\": [\n        {\n            \"key\": \"temperatureSettings\",\n            \"items\": [\n                \"temperatureSettings.normalThreshold\",\n                \"temperatureSettings.warningThreshold\",\n                \"temperatureSettings.maxValue\"\n            ]\n        },\n        {\n            \"key\": \"rssiSettings\",\n            \"items\": [\n                \"rssiSettings.excellentThreshold\",\n                \"rssiSettings.goodThreshold\",\n                \"rssiSettings.fairThreshold\",\n                \"rssiSettings.poorThreshold\"\n            ]\n        },\n        {\n            \"key\": \"memorySettings\",\n            \"items\": [\n                \"memorySettings.totalMemoryKB\",\n                \"memorySettings.warningPercentage\",\n                \"memorySettings.criticalPercentage\"\n            ]\n        },\n        {\n            \"key\": \"displaySettings\",\n            \"items\": [\n                \"displaySettings.showTimestamp\",\n                \"displaySettings.animationsEnabled\",\n                \"displaySettings.theme\"\n            ]\n        }\n    ]\n}",
    "dataKeySettingsSchema": "{}",
    "defaultConfig": "{\n    \"datasources\": [\n        {\n            \"type\": \"entity\",\n            \"name\": \"ESP32-S3 Telemetry\",\n            \"entityAliasId\": null,\n            \"dataKeys\": [\n                {\n                    \"name\": \"temperature\",\n                    \"type\": \"timeseries\",\n                    \"label\": \"Temperature\",\n                    \"color\": \"#4CAF50\",\n                    \"settings\": {},\n                    \"_hash\": 0.123456789\n                },\n                {\n                    \"name\": \"rssi\",\n                    \"type\": \"timeseries\",\n                    \"label\": \"RSSI\",\n                    \"color\": \"#2196F3\",\n                    \"settings\": {},\n                    \"_hash\": 0.987654321\n                },\n                {\n                    \"name\": \"heap\",\n                    \"type\": \"timeseries\",\n                    \"label\": \"Free Memory\",\n                    \"color\": \"#FF9800\",\n                    \"settings\": {},\n                    \"_hash\": 0.456789123\n                },\n                {\n                    \"name\": \"uptime\",\n                    \"type\": \"timeseries\",\n                    \"label\": \"Uptime\",\n                    \"color\": \"#9C27B0\",\n                    \"settings\": {},\n                    \"_hash\": 0.789123456\n                }\n            ]\n        }\n    ],\n    \"timewindow\": {\n        \"displayValue\": \"\",\n        \"selectedTab\": 0,\n        \"realtime\": {\n            \"realtimeType\": 1,\n            \"interval\": 1000,\n            \"timewindowMs\": 60000,\n            \"quickInterval\": \"CURRENT_DAY\"\n        }\n    },\n    \"showTitleIcon\": false,\n    \"iconColor\": \"rgba(0, 0, 0, 0.87)\",\n    \"iconSize\": \"24px\",\n    \"titleTooltip\": \"\",\n    \"showTitle\": true,\n    \"backgroundColor\": \"#fff\",\n    \"color\": \"rgba(0, 0, 0, 0.87)\",\n    \"padding\": \"16px\",\n    \"settings\": {\n        \"temperatureSettings\": {\n            \"normalThreshold\": 30,\n            \"warningThreshold\": 45,\n            \"maxValue\": 60\n        },\n        \"rssiSettings\": {\n            \"excellentThreshold\": -50,\n            \"goodThreshold\": -60,\n            \"fairThreshold\": -70,\n            \"poorThreshold\": -80\n        },\n        \"memorySettings\": {\n            \"totalMemoryKB\": 320,\n            \"warningPercentage\": 40,\n            \"criticalPercentage\": 20\n        },\n        \"displaySettings\": {\n            \"showTimestamp\": true,\n            \"animationsEnabled\": true,\n            \"theme\": \"blue-purple\"\n        }\n    },\n    \"title\": \"ESP32-S3 System Status\",\n    \"dropShadow\": true,\n    \"enableFullscreen\": false,\n    \"widgetStyle\": {},\n    \"titleStyle\": {\n        \"fontSize\": \"16px\",\n        \"fontWeight\": 400\n    },\n    \"useDashboardTimewindow\": true,\n    \"showLegend\": false,\n    \"actions\": {}\n}"
  }
}