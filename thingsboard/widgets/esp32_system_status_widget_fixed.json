{
  "widgetTypes": [
    {
      "createdTime": 1640995200000,
      "tenantId": {
        "entityType": "TENANT",
        "id": "13814000-1dd2-11b2-8080-808080808080"
      },
      "name": "ESP32-S3 System Status",
      "descriptor": {
        "type": "timeseries",
        "sizeX": 8,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "<div class=\"esp32-status-card\">\n  <div class=\"status-header\">\n    <div class=\"device-info\">\n      <h3 class=\"device-title\">ESP32-S3 System Status</h3>\n      <div class=\"status-indicator\"></div>\n    </div>\n    <div class=\"timestamp\"></div>\n  </div>\n  <div class=\"status-grid\">\n    <div class=\"metric-card primary-metric\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">üå°Ô∏è</span>\n        <span class=\"metric-title\">Temperature</span>\n      </div>\n      <div class=\"temperature-gauge\">\n        <div class=\"gauge-container\">\n          <svg class=\"gauge-svg\" viewBox=\"0 0 200 120\">\n            <path class=\"gauge-background\" d=\"M 30 90 A 70 70 0 0 1 170 90\" stroke=\"#e0e0e0\" stroke-width=\"8\" fill=\"none\"/>\n            <path class=\"gauge-active\" d=\"M 30 90 A 70 70 0 0 1 170 90\" stroke=\"#4CAF50\" stroke-width=\"8\" fill=\"none\"/>\n            <line class=\"gauge-needle\" x1=\"100\" y1=\"90\" x2=\"100\" y2=\"30\" stroke=\"#333\" stroke-width=\"2\"/>\n            <circle cx=\"100\" cy=\"90\" r=\"5\" fill=\"#333\"/>\n          </svg>\n        </div>\n        <div class=\"temperature-value\">\n          <span class=\"value\">--</span>\n          <span class=\"unit\">¬∞C</span>\n        </div>\n        <div class=\"temperature-status\">Normal</div>\n      </div>\n    </div>\n    <div class=\"metric-card\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">üì∂</span>\n        <span class=\"metric-title\">Wi-Fi Signal</span>\n      </div>\n      <div class=\"rssi-display\">\n        <div class=\"signal-bars\">\n          <div class=\"signal-bar\"></div>\n          <div class=\"signal-bar\"></div>\n          <div class=\"signal-bar\"></div>\n          <div class=\"signal-bar\"></div>\n          <div class=\"signal-bar\"></div>\n        </div>\n        <div class=\"rssi-value\">\n          <span class=\"value\">--</span>\n          <span class=\"unit\">dBm</span>\n        </div>\n        <div class=\"rssi-quality\">Unknown</div>\n      </div>\n    </div>\n    <div class=\"metric-card\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">üíæ</span>\n        <span class=\"metric-title\">Free Memory</span>\n      </div>\n      <div class=\"memory-display\">\n        <div class=\"memory-progress\">\n          <div class=\"progress-track\">\n            <div class=\"progress-fill\"></div>\n          </div>\n        </div>\n        <div class=\"memory-value\">\n          <span class=\"value\">--</span>\n          <span class=\"unit\">KB</span>\n        </div>\n        <div class=\"memory-status\">Available</div>\n      </div>\n    </div>\n    <div class=\"metric-card\">\n      <div class=\"metric-header\">\n        <span class=\"metric-icon\">‚è±Ô∏è</span>\n        <span class=\"metric-title\">Uptime</span>\n      </div>\n      <div class=\"uptime-display\">\n        <div class=\"uptime-segments\">\n          <div class=\"time-segment\">\n            <span class=\"time-value\">0</span>\n            <span class=\"time-label\">Days</span>\n          </div>\n          <div class=\"time-segment\">\n            <span class=\"time-value\">0</span>\n            <span class=\"time-label\">Hours</span>\n          </div>\n          <div class=\"time-segment\">\n            <span class=\"time-value\">0</span>\n            <span class=\"time-label\">Mins</span>\n          </div>\n        </div>\n        <div class=\"uptime-stability\">Starting</div>\n      </div>\n    </div>\n  </div>\n  <div class=\"status-footer\">\n    <div class=\"connection-status\">\n      <span class=\"connection-dot\"></span>\n      <span class=\"connection-text\">Connected</span>\n    </div>\n    <div class=\"data-rate\">Updates: 5s</div>\n  </div>\n</div>",
        "templateCss": ".esp32-status-card {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 16px;\n  padding: 20px;\n  color: white;\n  height: 100%;\n  box-sizing: border-box;\n  box-shadow: 0 8px 32px rgba(0,0,0,0.3);\n  position: relative;\n  overflow: hidden;\n}\n\n.esp32-status-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255,255,255,0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 16px;\n  z-index: 0;\n}\n\n.esp32-status-card > * {\n  position: relative;\n  z-index: 1;\n}\n\n.status-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid rgba(255,255,255,0.2);\n}\n\n.device-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.device-title {\n  margin: 0;\n  font-size: 18px;\n  font-weight: 600;\n  text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.status-indicator {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: #4CAF50;\n  box-shadow: 0 0 10px rgba(76,175,80,0.6);\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n.timestamp {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.status-grid {\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  gap: 15px;\n  height: calc(100% - 120px);\n}\n\n.metric-card {\n  background: rgba(255,255,255,0.15);\n  border-radius: 12px;\n  padding: 15px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255,255,255,0.2);\n  transition: all 0.3s ease;\n}\n\n.metric-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n}\n\n.primary-metric {\n  grid-row: 1 / 3;\n}\n\n.metric-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 10px;\n}\n\n.metric-icon {\n  font-size: 16px;\n}\n\n.metric-title {\n  font-size: 14px;\n  font-weight: 500;\n  opacity: 0.9;\n}\n\n.temperature-gauge {\n  text-align: center;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.gauge-container {\n  width: 120px;\n  height: 80px;\n  margin: 0 auto 15px;\n}\n\n.gauge-svg {\n  width: 100%;\n  height: 100%;\n}\n\n.gauge-active {\n  transition: stroke-dasharray 0.5s ease;\n}\n\n.gauge-needle {\n  transition: transform 0.5s ease;\n  transform-origin: 100px 90px;\n}\n\n.temperature-value {\n  margin-bottom: 8px;\n}\n\n.temperature-value .value {\n  font-size: 24px;\n  font-weight: 700;\n  text-shadow: 0 2px 4px rgba(0,0,0,0.3);\n}\n\n.temperature-value .unit {\n  font-size: 16px;\n  opacity: 0.8;\n  margin-left: 4px;\n}\n\n.temperature-status {\n  font-size: 12px;\n  opacity: 0.8;\n  font-weight: 500;\n}\n\n.rssi-display {\n  text-align: center;\n}\n\n.signal-bars {\n  display: flex;\n  justify-content: center;\n  gap: 3px;\n  margin-bottom: 10px;\n}\n\n.signal-bar {\n  width: 8px;\n  background: rgba(255,255,255,0.3);\n  border-radius: 4px 4px 0 0;\n  transition: all 0.3s ease;\n}\n\n.signal-bar:nth-child(1) { height: 8px; }\n.signal-bar:nth-child(2) { height: 12px; }\n.signal-bar:nth-child(3) { height: 16px; }\n.signal-bar:nth-child(4) { height: 20px; }\n.signal-bar:nth-child(5) { height: 24px; }\n\n.signal-bar.active {\n  background: #4CAF50;\n  box-shadow: 0 0 8px rgba(76,175,80,0.5);\n}\n\n.rssi-value .value {\n  font-size: 18px;\n  font-weight: 600;\n}\n\n.rssi-value .unit {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.rssi-quality {\n  font-size: 11px;\n  opacity: 0.8;\n  margin-top: 4px;\n}\n\n.memory-display {\n  text-align: center;\n}\n\n.memory-progress {\n  margin-bottom: 12px;\n}\n\n.progress-track {\n  width: 100%;\n  height: 8px;\n  background: rgba(255,255,255,0.3);\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #4CAF50, #2196F3);\n  border-radius: 4px;\n  transition: width 0.5s ease;\n  box-shadow: 0 0 8px rgba(76,175,80,0.3);\n  width: 0%;\n}\n\n.memory-value .value {\n  font-size: 16px;\n  font-weight: 600;\n}\n\n.memory-value .unit {\n  font-size: 12px;\n  opacity: 0.8;\n}\n\n.memory-status {\n  font-size: 11px;\n  opacity: 0.8;\n  margin-top: 4px;\n}\n\n.uptime-display {\n  text-align: center;\n}\n\n.uptime-segments {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.time-segment {\n  flex: 1;\n  text-align: center;\n}\n\n.time-value {\n  display: block;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 1;\n}\n\n.time-label {\n  display: block;\n  font-size: 10px;\n  opacity: 0.8;\n  margin-top: 2px;\n}\n\n.uptime-stability {\n  font-size: 11px;\n  opacity: 0.8;\n}\n\n.status-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 15px;\n  padding-top: 15px;\n  border-top: 1px solid rgba(255,255,255,0.2);\n  font-size: 12px;\n}\n\n.connection-status {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.connection-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: #4CAF50;\n  box-shadow: 0 0 8px rgba(76,175,80,0.5);\n}\n\n.data-rate {\n  opacity: 0.8;\n}\n\n@media (max-width: 768px) {\n  .status-grid {\n    grid-template-columns: 1fr;\n    grid-template-rows: auto;\n  }\n  \n  .primary-metric {\n    grid-row: auto;\n  }\n  \n  .device-title {\n    font-size: 16px;\n  }\n  \n  .gauge-container {\n    width: 100px;\n    height: 70px;\n  }\n  \n  .temperature-value .value {\n    font-size: 20px;\n  }\n}\n\n.status-normal { color: #4CAF50; }\n.status-warning { color: #FF9800; }\n.status-critical { color: #F44336; }",
        "controllerScript": "self.onInit = function() {\n    self.ctx.data = {\n        temperature: 0,\n        rssi: 0,\n        heap: 0,\n        uptime: 0\n    };\n    \n    self.updateDisplay();\n};\n\nself.onDataUpdated = function() {\n    var data = self.ctx.defaultSubscription.data;\n    \n    if (data && data.length > 0) {\n        for (var i = 0; i < data.length; i++) {\n            var dataKey = data[i].dataKey;\n            if (dataKey && data[i].data.length > 0) {\n                var value = data[i].data[data[i].data.length - 1][1];\n                \n                switch(dataKey.name) {\n                    case 'temperature':\n                        self.ctx.data.temperature = parseFloat(value);\n                        break;\n                    case 'rssi':\n                        self.ctx.data.rssi = parseInt(value);\n                        break;\n                    case 'heap':\n                        self.ctx.data.heap = parseInt(value);\n                        break;\n                    case 'uptime':\n                        self.ctx.data.uptime = parseInt(value);\n                        break;\n                }\n            }\n        }\n        \n        self.updateDisplay();\n        \n        var now = new Date();\n        self.ctx.$container.find('.timestamp').text('Last: ' + now.toLocaleTimeString());\n    }\n};\n\nself.updateDisplay = function() {\n    var temp = self.ctx.data.temperature;\n    var rssi = self.ctx.data.rssi;\n    var heap = self.ctx.data.heap;\n    var uptime = self.ctx.data.uptime;\n    \n    // Update Temperature\n    self.ctx.$container.find('.temperature-value .value').text(temp.toFixed(1));\n    \n    var percentage = Math.min(Math.max(temp / 60, 0), 1);\n    var angle = -90 + (percentage * 180);\n    self.ctx.$container.find('.gauge-needle').attr('transform', 'rotate(' + angle + ' 100 90)');\n    \n    var circumference = Math.PI * 70;\n    var progress = percentage * circumference;\n    self.ctx.$container.find('.gauge-active').attr('stroke-dasharray', progress + ',' + circumference);\n    \n    var statusText, color;\n    if (temp < 30) {\n        statusText = 'Normal';\n        color = '#4CAF50';\n    } else if (temp < 45) {\n        statusText = 'Warm';\n        color = '#FF9800';\n    } else {\n        statusText = 'Hot';\n        color = '#F44336';\n    }\n    \n    self.ctx.$container.find('.temperature-status').text(statusText);\n    self.ctx.$container.find('.gauge-active').attr('stroke', color);\n    \n    // Update RSSI\n    self.ctx.$container.find('.rssi-value .value').text(rssi);\n    \n    var bars = 0;\n    var quality = 'Poor';\n    \n    if (rssi >= -30) {\n        bars = 5;\n        quality = 'Excellent';\n    } else if (rssi >= -50) {\n        bars = 4;\n        quality = 'Very Good';\n    } else if (rssi >= -60) {\n        bars = 3;\n        quality = 'Good';\n    } else if (rssi >= -70) {\n        bars = 2;\n        quality = 'Fair';\n    } else if (rssi >= -80) {\n        bars = 1;\n        quality = 'Poor';\n    }\n    \n    self.ctx.$container.find('.signal-bar').each(function(index) {\n        if (index < bars) {\n            $(this).addClass('active');\n        } else {\n            $(this).removeClass('active');\n        }\n    });\n    \n    self.ctx.$container.find('.rssi-quality').text(quality);\n    \n    // Update Memory\n    var heapKB = Math.round(heap / 1024);\n    self.ctx.$container.find('.memory-value .value').text(heapKB.toLocaleString());\n    \n    var totalMemoryKB = 320;\n    var memoryPercentage = Math.min((heapKB / totalMemoryKB) * 100, 100);\n    \n    self.ctx.$container.find('.progress-fill').css('width', memoryPercentage + '%');\n    \n    var memStatus;\n    if (memoryPercentage > 70) {\n        memStatus = 'Excellent';\n    } else if (memoryPercentage > 40) {\n        memStatus = 'Good';\n    } else {\n        memStatus = 'Low';\n    }\n    \n    self.ctx.$container.find('.memory-status').text(memStatus);\n    \n    // Update Uptime\n    var days = Math.floor(uptime / 86400);\n    var hours = Math.floor((uptime % 86400) / 3600);\n    var minutes = Math.floor((uptime % 3600) / 60);\n    \n    var timeSegments = self.ctx.$container.find('.time-segment');\n    $(timeSegments[0]).find('.time-value').text(days);\n    $(timeSegments[1]).find('.time-value').text(hours);\n    $(timeSegments[2]).find('.time-value').text(minutes);\n    \n    var stability;\n    if (uptime < 300) {\n        stability = 'Starting';\n    } else if (uptime < 3600) {\n        stability = 'Warming Up';\n    } else if (uptime < 86400) {\n        stability = 'Stable';\n    } else {\n        stability = 'Rock Solid';\n    }\n    \n    self.ctx.$container.find('.uptime-stability').text(stability);\n};\n\nself.onDestroy = function() {\n    // Cleanup\n};",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}"
      },
      "bundleAlias": "esp32_widgets",
      "typeAlias": "esp32_system_status",
      "image": null,
      "description": "Comprehensive system status widget for ESP32-S3 showing temperature, signal strength, memory, and uptime in a professional layout",
      "tags": [
        "esp32",
        "iot",
        "telemetry",
        "system-status"
      ]
    }
  ]
}